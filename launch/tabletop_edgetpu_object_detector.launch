<launch>
  <arg name="input" default="/kinect_head_remote/depth_registered/points" />
  <arg name="sensor_frame" default="head_mount_kinect_rgb_optical_frame" />
  <arg name="manager" default="tabletop_object_detector_nodelet_manager" />
  <arg name="machine" default="localhost" />
  <arg name="RGB_CAMERA_INFO" value="/kinect_head/rgb/camera_info" />

  <arg name="launch_manager" default="true" />
  <arg name="launch_tracking" default="false" />
  <arg name="launch_openni" default="false" />
  <arg name="launch_rviz" default="false" />
  <arg name="publish_tf" default="true" />

  <machine name="localhost" address="localhost" />

  <!-- openni driver -->
  <include file="$(find openni_launch)/launch/openni.launch"
           if="$(arg launch_openni)">
    <arg name="depth_registration" value="true" />
  </include>

  <!-- visualization -->
  <node name="rviz_tabletop" pkg="rviz" type="rviz"
        args=" -d $(find jsk_pcl_ros)/config/openni_tabletop.rviz"
        if="$(arg launch_rviz)"/>

  <!-- tabletop object detection -->
  <node name="$(arg manager)" pkg="nodelet" type="nodelet" args="manager"
        machine="$(arg machine)" if="$(arg launch_manager)"
        output="screen" />

  <node name="input_relay" pkg="nodelet" type="nodelet"
        args="load jsk_topic_tools/Relay $(arg manager)"
        machine="$(arg machine)">
    <remap from="~input" to="$(arg input)" />
  </node>

  <node name="self_filter"
        pkg="robot_self_filter" type="self_filter"
        clear_params="true" respawn="true">
    <remap from="robot_description" to="/robot_description" />
    <remap from="cloud_in" to="input_relay/output" />
    <remap from="cloud_out" to="robot_self_filtered_points" />
    <rosparam>
      use_rgb: true
      keep_organized: true
      subsample_value: 0.0
    </rosparam>
    <rosparam command="load"
              file="$(find jsk_2020_4_carry_dish)/config/self_filter.yaml" />
  </node>

  <node name="attention_clipper"
        pkg="nodelet" type="nodelet"
        args="standalone jsk_pcl/AttentionClipper">
        <remap from="~input" to="/kinect_head/depth_registered/camera_info" />
        <remap from="~input/points" to="/robot_self_filtered_points" />

    <rosparam>
      initial_pos: [0, 0.0, 0.8]
      initial_rot: [-0.65, 0, 0]
      dimension_x: 0.7
      dimension_y: 0.5
      dimension_z: 1.0
      frame_id: head_mount_kinect_rgb_optical_frame
    </rosparam>
    <!--
    <rosparam>
      initial_pos: [0, 0.05, 0.8]
      initial_rot: [0.99, 0, 0]
      dimension_x: 0.7
      dimension_y: 0.3
      dimension_z: 0.6
      frame_id: head_mount_kinect_rgb_optical_frame
    </rosparam>
    -->
  </node>
  <node name="extract_indices"
        pkg="jsk_pcl_ros" type="extract_indices">

    <remap from="~input" to="/robot_self_filtered_points" />

    <remap from="~indices" to="attention_clipper/output/point_indices" />
    <rosparam>
      keep_organized: true
    </rosparam>
  </node>

  <node name="multi_plane_estimate_ssd" pkg="nodelet" type="nodelet"
        args="load jsk_pcl/OrganizedMultiPlaneSegmentation $(arg manager)"
        output="screen" respawn="true"
        if="$(arg launch_manager)"
        machine="$(arg machine)">
        <remap from="~input" to="/extract_indices/output" />
    <rosparam>
      max_curvature: 0.01
      estimate_normal: true
      ransac_refine_outlier_distance_threshold: 0.01
    </rosparam>
  </node>
  
  <node name="polygon_magnifier_ssd" pkg="nodelet" type="nodelet"
        args="load jsk_pcl_utils/PolygonMagnifier $(arg manager)"
        output="screen"
        machine="$(arg machine)">
    <remap from="~input" to="multi_plane_estimate_ssd/output_refined_polygon" />
  </node>
  <node name="plane_extraction_ssd" pkg="nodelet" type="nodelet"
        args="load jsk_pcl/MultiPlaneExtraction $(arg manager)"
        output="screen" 
        machine="$(arg machine)">
        <remap from="~input" to="/extract_indices/output" />
        <remap from="~indices" to="/multi_plane_estimate_ssd/output_refined" />
        <remap from="~input_polygons" to="/multi_plane_estimate_ssd/output_refined_polygon" />
        <remap from="~input_coefficients" to="/multi_plane_estimate_ssd/output_refined_coefficients" />
    <rosparam subst_value="true">
      max_queue_size: 1000
      use_sensor_frame: true
      keep_organized: true
      sensor_frame: $(arg sensor_frame)
      min_height: 0
    </rosparam>
  </node>
  <node name="rects_to_cpi_ssd"
        pkg="jsk_recognition_utils" type="rect_array_to_cluster_point_indices.py"
        output="screen" >
    <remap from="~input" to="/edgetpu_object_detector/output/rects"/>
    <remap from="~input/info" to="$(arg RGB_CAMERA_INFO)"/>
    <rosparam>
      approximate_sync: true
      use_info: true
    </rosparam>
  </node>
  <node name="throttle_segmentation" pkg="nodelet" type="nodelet"
        args="load jsk_topic_tools/LightweightThrottle $(arg manager)"
        output="screen"
        machine="$(arg machine)">
    <remap from="~input" to="rects_to_cpi_ssd/output" />
    <remap from="~output" to="rects_to_cpi_ssd/output_throttle" />
  </node>
  <node name="segmentation_decomposer_ssd" pkg="nodelet" type="nodelet"
        args="load jsk_pcl/ClusterPointIndicesDecomposer $(arg manager)"
        output="screen" 
        machine="$(arg machine)">
        <remap from="~input" to="/plane_extraction_ssd/output" />
        <remap from="~target" to="/rects_to_cpi_ssd/output" />
        <remap from="~align_planes" to="/multi_plane_estimate_ssd/output_refined_polygon" />
        <remap from="~align_planes_coefficients"
           to="/multi_plane_estimate_ssd/output_refined_coefficients" />
    <rosparam subst_value="true">
      approximate_sync: true  
      align_boxes: false
      align_boxes_with_plane: false
      target_frame_id: base_footprint
      queue_size: 100000
      publish_clouds: false
      publish_tf: $(arg publish_tf)
      sort_by: -cloud_size 
      use_pca: true
      min_size: 10000
      max_size: 1000000000
    </rosparam>
  </node>

  <!-- interactive -->
  <node name="bounding_box_marker" pkg="jsk_interactive_marker" type="bounding_box_marker"
        output="screen"
        machine="$(arg machine)">
    <remap from="~bounding_box_array" to="segmentation_decomposer_ssd/boxes" />
  </node>
  <node name="selected_cloud" pkg="nodelet" type="nodelet"
        args="load jsk_pcl/SelectedClusterPublisher $(arg manager)"
        output="screen"
        machine="$(arg machine)">
    <remap from="~input" to="/plane_extraction_ssd/output" />
    <remap from="~indices" to="/rects_to_cpi_ssd/output" />
    <remap from="~selected_index" to="/bounding_box_marker/selected_index" />
    <remap from="~output" to="/selected_pointcloud" />
    <rosparam>
      keep_organized: true
    </rosparam>
  </node>

  <!-- tracking -->
  <group if="$(arg launch_tracking)">
    <node name="octree_change_detector" pkg="nodelet" type="nodelet"
          args="load jsk_pcl/OctreeChangePublisher $(arg manager)"
          machine="$(arg machine)">
      <remap from="~input" to="voxelgrid/output" />
      <rosparam>
        resolution: 0.1
        noise_filter: 8
      </rosparam>
    </node>
    <node name="octree_change_detector_euclidean_filter" pkg="nodelet" type="nodelet"
          args="load jsk_pcl/EuclideanClustering $(arg manager)"
          machine="$(arg machine)">
      <remap from="~input" to="octree_change_detector/octree_change_result" />
    </node>
    <node name="octree_change_detector_euclidean_filter_points" pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ClusterPointIndicesDecomposer $(arg manager)"
          output="screen"
          machine="$(arg machine)">
      <remap from="~input" to="octree_change_detector/octree_change_result" />
      <remap from="~target" to="octree_change_detector_euclidean_filter/output" />
      <rosparam>
        align_boxes: false
        use_pca: false
        publish_clouds: false
        publish_tf: false
      </rosparam>
    </node>
    <node name="voxelgrid" pkg="nodelet" type="nodelet"
          args="load jsk_pcl/OctreeVoxelGrid $(arg manager)"
          output="screen" clear_params="true"
          machine="$(arg machine)">
          <remap from="~input" to="input_relay/output" />
          <!--not recomend to use input_relay-->
      <param name="resolution" value="0.01" />
      <rosparam>
        point_type: xyzrgb
        marker_color_alpha: 0.5
      </rosparam>
    </node>
    <node name="model_voxelgrid" pkg="nodelet" type="nodelet"
          args="load jsk_pcl/OctreeVoxelGrid $(arg manager)"
          output="screen" clear_params="true"
          machine="$(arg machine)">
      <remap from="~input" to="/selected_pointcloud" />
      <param name="resolution" value="0.01" />
      <rosparam>
        point_type: xyzrgb
        marker_color_alpha: 0.5
      </rosparam>
    </node>
    <node name="particle_filter_tracker" pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ParticleFilterTracking $(arg manager)"
          output="screen" clear_params="true"
          machine="$(arg machine)">
      <remap from="~input" to="voxelgrid/output" />
      <remap from="~input_change" to="octree_change_detector/octree_change_result" />
      <remap from="~input_change" to="octree_change_detector_euclidean_filter_points/debug_output" />
      <remap from="~renew_model" to="model_voxelgrid/output" />
      <rosparam>
        max_particle_num: 1000
        use_change_detection: true
        default_step_covariance_x: 0.0004
        default_step_covariance_y: 0.0004
        default_step_covariance_z: 0.0004
      </rosparam>
    </node>
    <node name="cloud_on_plane" pkg="nodelet" type="nodelet"
          args="load jsk_pcl_utils/CloudOnPlane $(arg manager)"
          output="screen" machine="$(arg machine)">
      <remap from="~input" to="particle_filter_tracker/track_result" />
      <remap from="~input/polygon" to="polygon_magnifier_ssd/output" />
    </node>
    <node name="cloud_on_plane_info" pkg="jsk_pcl_ros_utils" type="cloud_on_plane_info.py"
          output="screen">
      <remap from="~input" to="cloud_on_plane/output" />
      <rosparam>
        left: 10
        text_size: 24
        top: 350
      </rosparam>
    </node>
    <node name="tracker_status_info" pkg="jsk_pcl_ros" type="tracker_status_info.py"
          output="screen">
      <remap from="~input" to="particle_filter_tracker/output/tracker_status" />
      <rosparam>
        left: 10
        text_size: 24
        top: 300
      </rosparam>
    </node>
    <node name="vel_min_text" pkg="jsk_rviz_plugins" type="static_overlay_text.py">
      <rosparam>
        text: 0 m/s
        left: 80
        top: 650
      </rosparam>
    </node>
    <node name="vel_max_text" pkg="jsk_rviz_plugins" type="static_overlay_text.py">
      <rosparam>
        text: 0.3 m/s
        left: 80
        top: 550
      </rosparam>
    </node>
    <node name="tm_min_text" pkg="jsk_rviz_plugins" type="static_overlay_text.py">
      <rosparam>
        text: 0 s
        left: 80
        top: 500
      </rosparam>
    </node>
    <node name="tm_max_text" pkg="jsk_rviz_plugins" type="static_overlay_text.py">
      <rosparam>
        text: 0.1 s
        left: 80
        top: 400
      </rosparam>
    </node>
  </group>
</launch>
